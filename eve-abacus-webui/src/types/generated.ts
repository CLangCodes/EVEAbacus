/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Abacus/ManufBatch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculates a complete manufacturing batch analysis including Bill of Materials, Production Routing, and Market Analysis
         * @description Processes blueprint manufacturing orders and returns detailed analysis including materials, costs, and market data.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        post: {
            parameters: {
                query?: {
                    "api-version"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["ManufacturingBatchRequest"];
                    "application/json": components["schemas"]["ManufacturingBatchRequest"];
                    "text/json": components["schemas"]["ManufacturingBatchRequest"];
                    "application/*+json": components["schemas"]["ManufacturingBatchRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ManufBatch"];
                        "application/json": components["schemas"]["ManufBatch"];
                        "text/json": components["schemas"]["ManufBatch"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Abacus/InventionSuggestion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Returns a list of blueprints suitable for invention based on character's R&D skills
         * @description Analyzes the provided R&D skill IDs and returns a list of blueprints that can be used for invention with those skills.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        post: {
            parameters: {
                query: {
                    /**
                     * @description Array of EVE Online R&D skill IDs. Common skills include:
                     *     - 3408: Science
                     *     - 3409: Advanced Industry
                     *     - 11433: High Energy Physics
                     *     - 11442: Molecular Engineering
                     *     - 11443: Nanite Engineering
                     * @example [
                     *       "3408",
                     *       "3409"
                     *     ]
                     */
                    skillIds: string[];
                    "api-version"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": {
                            [key: string]: string;
                        };
                        "application/json": {
                            [key: string]: string;
                        };
                        "text/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Abacus/PIPlanner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finds planets suitable for Planetary Interaction (PI)
         * @description Returns a list of planets within the specified range of a focal system, with optional filtering by security status and planet type.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        post: {
            parameters: {
                query: {
                    /**
                     * @description Name of the EVE Online solar system to use as the center point
                     * @example Jita
                     */
                    focalSystemName: string;
                    /**
                     * @description Number of jumps from the focal system to search (1-10)
                     * @example 5
                     */
                    range: number;
                    /**
                     * @description Array of security status filters (e.g., ['highsec', 'lowsec', 'nullsec'])
                     * @example [
                     *       "highsec",
                     *       "nullsec"
                     *     ]
                     */
                    securityStatus?: string[];
                    /**
                     * @description Array of planet types to filter by (e.g., ['Barren', 'Gas', 'Ice', 'Lava', 'Oceanic', 'Plasma', 'Storm', 'Temperate'])
                     *     Available planet types:
                     *     - Barren
                     *     - Gas
                     *     - Ice
                     *     - Lava
                     *     - Oceanic
                     *     - Plasma
                     *     - Storm
                     *     - Temperate
                     * @example [
                     *       "Barren",
                     *       "Oceanic"
                     *     ]
                     */
                    planetTypes?: string[];
                    "api-version"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Denormalize"][];
                        "application/json": components["schemas"]["Denormalize"][];
                        "text/json": components["schemas"]["Denormalize"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Calculator/manufacturing-batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculates a complete manufacturing batch analysis including Bill of Materials, Production Routing, and Market Analysis
         * @description Processes blueprint manufacturing orders and returns detailed analysis including materials, costs, and market data.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["ManufacturingBatchRequest"];
                    "application/json": components["schemas"]["ManufacturingBatchRequest"];
                    "text/json": components["schemas"]["ManufacturingBatchRequest"];
                    "application/*+json": components["schemas"]["ManufacturingBatchRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ManufBatch"];
                        "application/json": components["schemas"]["ManufBatch"];
                        "text/json": components["schemas"]["ManufBatch"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Calculator/search-blueprints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Searches for blueprints by name
         * @description Performs a search across all blueprints and returns matching names for autocomplete functionality. Used for blueprint selection in manufacturing orders.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description Search term for blueprint names (minimum 2 characters recommended) */
                    searchTerm: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Calculator/blueprint-type-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the blueprint TypeID by its exact name
         * @description Retrieves the TypeID of a blueprint using its exact name. Used for validation when a user selects a blueprint from the autocomplete list.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description Exact name of the blueprint (case-sensitive) */
                    blueprintName: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": number;
                        "application/json": number;
                        "text/json": number;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Calculator/product-type-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the product TypeID that a blueprint produces
         * @description Retrieves the TypeID of the product manufactured by a blueprint for the specified activity. Used to determine what item will be produced.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description TypeID of the blueprint */
                    blueprintTypeId: number;
                    /** @description Activity ID (1 = Manufacturing, 8 = Invention, etc.) */
                    activityId: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": number;
                        "application/json": number;
                        "text/json": number;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Calculator/validate-blueprint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validates a blueprint name and returns blueprint and product TypeIDs
         * @description Combines blueprint validation and product lookup in a single call. Returns both the blueprint TypeID and the product TypeID for the specified activity.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description Exact name of the blueprint (case-sensitive) */
                    blueprintName: string;
                    /** @description Activity ID (1 = Manufacturing, 8 = Invention, etc.) */
                    activityId: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": unknown;
                        "application/json": unknown;
                        "text/json": unknown;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Calculator/market-hubs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a list of available market hub names
         * @description Returns a list of market hub station names that can be used for market analysis and price calculations.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Calculator/invention-skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a list of invention skills
         * @description Returns a list of R&D skills that can be used for blueprint invention calculations.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Calculator/invention-suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gets invention suggestions based on skills
         * @description Analyzes the provided invention skill names and returns a list of blueprints suitable for invention with those skills. Requires at least 3 skills to be provided.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": string[];
                    "application/json": string[];
                    "text/json": string[];
                    "application/*+json": string[];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performs a basic health check of the API service
         * @description Returns the current status of the API service including version and timestamp.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: {
                    "api-version"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["HealthResponse"];
                        "application/json": components["schemas"]["HealthResponse"];
                        "text/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Health/db": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performs a database connectivity health check
         * @description Tests the connection to the database and returns the status.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: {
                    "api-version"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["DatabaseHealthResponse"];
                        "application/json": components["schemas"]["DatabaseHealthResponse"];
                        "text/json": components["schemas"]["DatabaseHealthResponse"];
                    };
                };
                /** @description Service Unavailable */
                503: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["DatabaseHealthResponse"];
                        "application/json": components["schemas"]["DatabaseHealthResponse"];
                        "text/json": components["schemas"]["DatabaseHealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Map/SearchSolarSystems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Searches for EVE Online solar system names
         * @description Returns a list of solar system names matching the search term for autocomplete functionality. If no search term is provided, returns all system names.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: {
                    /** @description Optional search term for solar system names */
                    searchTerm?: string;
                    "api-version"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Map/PlanetTypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the available planet types
         * @description Returns a list of all planet types that can be used for filtering planetary search results.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: {
                    "api-version"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Map/Planets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gets planets based on filters
         * @description Returns a paginated list of planets matching the specified criteria for Planetary Interaction planning.
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        post: {
            parameters: {
                query?: {
                    "api-version"?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["PIPlannerRequest"];
                    "application/json": components["schemas"]["PIPlannerRequest"];
                    "text/json": components["schemas"]["PIPlannerRequest"];
                    "application/*+json": components["schemas"]["PIPlannerRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PlanetDTOPaginatedResponse"];
                        "application/json": components["schemas"]["PlanetDTOPaginatedResponse"];
                        "text/json": components["schemas"]["PlanetDTOPaginatedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/blueprintProdOfInvention": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Checks if a blueprint's product can be invented
         * @description Determines whether the specified blueprint can be obtained through invention
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description TypeID of the blueprint to check */
                    id: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ValidationProblemDetails"];
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "text/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/itemName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the name of an item by its TypeID
         * @description Retrieves the full name of an EVE Online item using its TypeID
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description TypeID of the item */
                    id: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/itemId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the TypeID of an item by its exact name
         * @description Retrieves the TypeID of an EVE Online item using its exact name (case-sensitive)
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description Exact name of the item (case-sensitive) */
                    name: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/bpIdByProdId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the blueprint TypeID that produces a specific item
         * @description Finds the blueprint that can manufacture the specified product
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description TypeID of the product */
                    id: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/prodIdByBpId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the product TypeID that a blueprint produces
         * @description Finds the product that is manufactured by the specified blueprint
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query: {
                    /** @description TypeID of the blueprint */
                    id: number;
                    /** @description Activity ID (1 = Manufacturing, default) */
                    activityId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets detailed information about an item by its TypeID
         * @description Retrieves complete item information from the EVE Online SDE
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description TypeID of the item */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Item"];
                        "application/json": components["schemas"]["Item"];
                        "text/json": components["schemas"]["Item"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/bp/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets detailed information about a blueprint by its TypeID
         * @description Retrieves complete blueprint information from the EVE Online SDE
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: {
                    /** @description Activity ID (1 = Manufacturing, 8 = Invention) */
                    activityId?: number;
                };
                header?: never;
                path: {
                    /** @description TypeID of the blueprint */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Blueprint"];
                        "application/json": components["schemas"]["Blueprint"];
                        "text/json": components["schemas"]["Blueprint"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/bp/{id}/materials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the material requirements for a blueprint
         * @description Retrieves the list of materials needed for manufacturing or other activities with this blueprint
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: {
                    /** @description Activity ID (1 = Manufacturing, 8 = Invention) */
                    activityId?: number;
                };
                header?: never;
                path: {
                    /** @description TypeID of the blueprint */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["BPSkill"][];
                        "application/json": components["schemas"]["BPSkill"][];
                        "text/json": components["schemas"]["BPSkill"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/bp/{id}/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the products produced by a blueprint
         * @description Retrieves the list of items produced by this blueprint for the specified activity
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: {
                    /** @description Activity ID (1 = Manufacturing, 8 = Invention) */
                    activityId?: number;
                };
                header?: never;
                path: {
                    /** @description TypeID of the blueprint */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["BPSkill"][];
                        "application/json": components["schemas"]["BPSkill"][];
                        "text/json": components["schemas"]["BPSkill"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/bp/{id}/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the skill requirements for a blueprint
         * @description Retrieves the list of skills needed to use this blueprint for the specified activity
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: {
                    /** @description Activity ID (1 = Manufacturing, 8 = Invention) */
                    activityId?: number;
                };
                header?: never;
                path: {
                    /** @description TypeID of the blueprint */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["BPSkill"][];
                        "application/json": components["schemas"]["BPSkill"][];
                        "text/json": components["schemas"]["BPSkill"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/bpexists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Checks if a blueprint exists in the SDE
         * @description Verifies whether a blueprint with the specified TypeID exists in the EVE Online Static Data Export
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description TypeID of the blueprint to check */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/itemexists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Checks if an item exists in the SDE
         * @description Verifies whether an item with the specified TypeID exists in the EVE Online Static Data Export
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description TypeID of the item to check */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/SDE/bpSearch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Searches for blueprints by name
         * @description Performs a search across all blueprints and returns matching names for autocomplete functionality
         *
         *     **Rate Limiting:**
         *     - 20 requests per second
         *     - 100 requests per minute
         *     - 1000 requests per hour
         */
        post: {
            parameters: {
                query: {
                    /** @description Search term for blueprint names */
                    search: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The API versions supported by this endpoint */
                        "api-supported-versions"?: string;
                        /** @description The content type of the response */
                        "content-type"?: string;
                        /** @description The date and time when the response was generated */
                        date?: string;
                        /** @description The server software used to handle the request */
                        server?: string;
                        /** @description The encoding used to transfer the response */
                        "transfer-encoding"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string[];
                        "application/json": string[];
                        "text/json": string[];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BOMLineItem: {
            /** Format: int32 */
            typeId?: number;
            name?: string | null;
            /** Format: int32 */
            requisitioned?: number;
            item: components["schemas"]["Item"];
            marketHistory?: components["schemas"]["MarketRegionHistory"][] | null;
            purchaseRequisitions?: components["schemas"]["PurchaseRequisition"][] | null;
            marketStats?: components["schemas"]["MarketStat"][] | null;
            /** Format: double */
            readonly lowestSellPrice?: number | null;
            readonly sellStation?: string | null;
            /** Format: double */
            readonly lowestBuyPrice?: number | null;
            readonly buyStation?: string | null;
        };
        BPMaterial: {
            /** Format: int32 */
            blueprintTypeId?: number | null;
            /** Format: int32 */
            activityId?: number | null;
            /** Format: int32 */
            materialTypeId?: number | null;
            /** Format: int32 */
            quantity?: number | null;
        };
        BPProduct: {
            /** Format: int32 */
            blueprintTypeId?: number | null;
            /** Format: int32 */
            activityId?: number | null;
            /** Format: int32 */
            productTypeId?: number | null;
            /** Format: int32 */
            quantity?: number | null;
            /** Format: float */
            probability?: number | null;
        };
        BPSkill: {
            /** Format: int32 */
            blueprintTypeId?: number | null;
            /** Format: int32 */
            activityId?: number | null;
            /** Format: int32 */
            skillId?: number | null;
            /** Format: int32 */
            level?: number | null;
        };
        BPTime: {
            /** Format: int32 */
            blueprintTypeId?: number;
            /** Format: int32 */
            activityId?: number;
            /** Format: int32 */
            time?: number | null;
        };
        Blueprint: {
            /** Format: int32 */
            blueprintTypeId?: number;
            /** Format: int32 */
            maxProductionLimit?: number | null;
            itemProperty?: components["schemas"]["Item"];
            skills?: components["schemas"]["Item"][] | null;
            bpSkills?: components["schemas"]["BPSkill"][] | null;
            products?: components["schemas"]["Item"][] | null;
            bpProducts?: components["schemas"]["BPProduct"][] | null;
            materials?: components["schemas"]["Item"][] | null;
            bpMaterials?: components["schemas"]["BPMaterial"][] | null;
            bpTimes?: components["schemas"]["BPTime"][] | null;
        };
        Category: {
            /** Format: int32 */
            categoryId?: number;
            categoryName?: string | null;
            published?: boolean | null;
            /** Format: int32 */
            iconId?: number | null;
        };
        Constellation: {
            /** Format: int32 */
            constellationId?: number;
            constellationName?: string | null;
            /** Format: int32 */
            regionId?: number | null;
            /** Format: float */
            x?: number | null;
            /** Format: float */
            y?: number | null;
            /** Format: float */
            z?: number | null;
            /** Format: float */
            x_Min?: number | null;
            /** Format: float */
            x_Max?: number | null;
            /** Format: float */
            y_Min?: number | null;
            /** Format: float */
            y_Max?: number | null;
            /** Format: float */
            z_Min?: number | null;
            /** Format: float */
            z_Max?: number | null;
            /** Format: float */
            radius?: number | null;
            /** Format: int32 */
            factionId?: number | null;
        };
        /** @description Response model for database health check */
        DatabaseHealthResponse: {
            status?: string | null;
            database?: string | null;
            /** Format: date-time */
            timestamp?: string;
            responseTime?: string | null;
            message?: string | null;
        };
        Denormalize: {
            /** Format: int64 */
            itemId?: number;
            name: components["schemas"]["Name"];
            /** Format: int32 */
            typeId?: number | null;
            item: components["schemas"]["Item"];
            /** Format: int32 */
            solarSystemId?: number | null;
            solarSystem: components["schemas"]["SolarSystem"];
            /** Format: int32 */
            constellationId?: number | null;
            constellation: components["schemas"]["Constellation"];
            /** Format: int32 */
            regionId?: number | null;
            region: components["schemas"]["Region"];
            /** Format: int32 */
            orbitId?: number | null;
            /** Format: float */
            x?: number | null;
            /** Format: float */
            y?: number | null;
            /** Format: float */
            z?: number | null;
            /** Format: float */
            radius?: number | null;
            /** Format: int32 */
            nameId?: number | null;
            /** Format: float */
            security?: number | null;
            /** Format: int32 */
            celestialIndex?: number | null;
            /** Format: int32 */
            orbitIndex?: number | null;
            /** Format: int32 */
            readonly minLinkPowerGrid?: number | null;
            /** Format: int32 */
            readonly minLinkCPU?: number | null;
        };
        Group: {
            /** Format: int32 */
            groupId?: number;
            /** Format: int32 */
            categoryId?: number | null;
            category?: components["schemas"]["Category"];
            groupName?: string | null;
            /** Format: int32 */
            iconId?: number | null;
            useBasePrice?: boolean | null;
            anchored?: boolean | null;
            anchorable?: boolean | null;
            fittableNonSingleton?: boolean | null;
            published?: boolean | null;
        };
        /** @description Response model for basic health check */
        HealthResponse: {
            status?: string | null;
            /** Format: date-time */
            timestamp?: string;
            version?: string | null;
            service?: string | null;
        };
        Item: {
            /** Format: int32 */
            typeId?: number;
            published?: boolean | null;
            typeName?: string | null;
            description?: string | null;
            /** Format: int32 */
            groupId?: number | null;
            group?: components["schemas"]["Group"];
            /** Format: int32 */
            marketGroupId?: number | null;
            /** Format: int32 */
            graphicId?: number | null;
            /** Format: float */
            radius?: number | null;
            /** Format: int32 */
            iconId?: number | null;
            /** Format: int32 */
            soundId?: number | null;
            /** Format: int32 */
            factionId?: number | null;
            /** Format: int32 */
            raceId?: number | null;
            sofFactionName?: string | null;
            /** Format: int32 */
            sofMaterialSetId?: number | null;
            /** Format: int32 */
            metaGroupId?: number | null;
            /** Format: int32 */
            variationparentTypeId?: number | null;
            /** Format: float */
            mass?: number | null;
            /** Format: float */
            volume?: number | null;
            /** Format: float */
            packagedVolume?: number | null;
            /** Format: float */
            capacity?: number | null;
            /** Format: int32 */
            portionSize?: number | null;
            /** Format: float */
            basePrice?: number | null;
            blueprints?: components["schemas"]["Blueprint"][] | null;
            bpSkills?: components["schemas"]["BPSkill"][] | null;
            bpProducts?: components["schemas"]["BPProduct"][] | null;
            bpMaterials?: components["schemas"]["BPMaterial"][] | null;
        };
        ManufBatch: {
            productionRouting?: components["schemas"]["ProductionRoute"][] | null;
            productionRoutingString?: string[] | null;
            billOfMaterials?: components["schemas"]["BOMLineItem"][] | null;
            billOfMaterialsString?: string[] | null;
            stationBillOfMaterials?: components["schemas"]["StationBillOfMaterials"][] | null;
            purchaseOrders?: components["schemas"]["PurchaseRequisition"][] | null;
            marketProfile?: components["schemas"]["MarketProfile"];
            supplyPlan?: components["schemas"]["SupplyPlan"];
        };
        ManufacturingBatchRequest: {
            orderDTOs?: components["schemas"]["OrderDTO"][] | null;
            stationIds?: string[] | null;
        };
        MarketOrder: {
            /** Format: date-time */
            dateTime?: string;
            /** Format: int32 */
            duration?: number;
            isBuyOrder?: boolean;
            issued?: string | null;
            /** Format: int64 */
            locationId?: number;
            station?: components["schemas"]["Station"];
            /** Format: int32 */
            minVolume?: number;
            /** Format: int64 */
            orderId?: number;
            /** Format: double */
            price?: number;
            range?: string | null;
            /** Format: int32 */
            regionId?: number;
            /** Format: int32 */
            systemId?: number;
            /** Format: int32 */
            typeId?: number;
            typeName?: string | null;
            /** Format: int32 */
            volumeRemain?: number;
            /** Format: int32 */
            volumeTotal?: number;
        };
        MarketProfile: {
            /** Format: double */
            materialCost?: number;
            /** Format: double */
            revenueSellOrder?: number;
            /** Format: double */
            revenueBuyOrder?: number;
            /** Format: double */
            readonly profitSellOrder?: number;
            /** Format: double */
            readonly profitBuyOrder?: number;
        };
        MarketRegionHistory: {
            /** Format: int32 */
            regionId?: number;
            /** Format: int32 */
            typeId?: number;
            /** Format: double */
            average?: number;
            /** Format: date-time */
            date?: string;
            /** Format: double */
            highest?: number;
            /** Format: double */
            lowest?: number;
            /** Format: int64 */
            orderCount?: number;
            /** Format: int64 */
            volume?: number;
        };
        MarketStat: {
            /** Format: date-time */
            dateTime?: string;
            /** Format: int32 */
            typeId?: number;
            /** Format: int64 */
            stationId?: number;
            /** Format: int32 */
            regionId?: number;
            stationName?: string | null;
            /** Format: double */
            averageSellPrice?: number;
            /** Format: int64 */
            sellVolume?: number;
            /** Format: double */
            averageBuyPrice?: number;
            /** Format: int64 */
            buyVolume?: number;
        };
        Name: {
            /** Format: int64 */
            itemId?: number;
            itemName?: string | null;
        };
        Order: {
            /** Format: int32 */
            blueprintTypeId?: number;
            /** Format: int32 */
            activityId?: number;
            /** Format: int32 */
            productTypeId?: number;
            productName: string | null;
            product: components["schemas"]["Item"];
            blueprintName: string | null;
            /** Format: int32 */
            copies?: number;
            /** Format: int32 */
            runs?: number;
            /** Format: int32 */
            readonly quantity?: number;
            /** Format: int32 */
            me?: number;
            /** Format: int32 */
            te?: number;
            /** Format: int32 */
            parentBlueprintTypeId?: number | null;
        };
        OrderDTO: {
            blueprintName?: string | null;
            /** Format: int32 */
            activityId?: number;
            /** Format: int32 */
            copies?: number;
            /** Format: int32 */
            runs?: number;
            /** Format: int32 */
            me?: number;
            /** Format: int32 */
            te?: number;
            /** Format: int32 */
            parentBlueprintTypeId?: number | null;
        };
        PIPlannerRequest: {
            focalSystemName?: string | null;
            /** Format: int32 */
            range?: number;
            securityStatus?: string[] | null;
            planetTypes?: string[] | null;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        PlanetDTO: {
            name?: string | null;
            solarSystem?: string | null;
            constellation?: string | null;
            region?: string | null;
            planetType?: string | null;
            /** Format: float */
            security?: number | null;
            /** Format: float */
            radius?: number | null;
            /** Format: int32 */
            minLinkPowerGrid?: number | null;
            /** Format: int32 */
            minLinkCPU?: number | null;
        };
        PlanetDTOPaginatedResponse: {
            items?: components["schemas"]["PlanetDTO"][] | null;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            totalPages?: number;
            hasPreviousPage?: boolean;
            hasNextPage?: boolean;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        ProcurementPlan: {
            /** Format: int64 */
            stationId?: number;
            stationName?: string | null;
            /** Format: date-time */
            dateTime?: string;
            purchaseRequisitions?: components["schemas"]["PurchaseRequisition"][] | null;
            /** Format: double */
            readonly totalVolume?: number;
            readonly marketImport?: string[] | null;
            /** Format: double */
            readonly estimatedCost?: number;
        };
        ProductionRoute: {
            /** Format: int32 */
            materialTypeId?: number;
            materialName?: string | null;
            /** Format: int32 */
            blueprintTypeId?: number;
            blueprintName?: string | null;
            /** Format: int32 */
            requisitioned?: number;
            order: components["schemas"]["Order"];
            orders?: components["schemas"]["Order"][] | null;
            /** Format: int32 */
            producedPerRun: number;
            /** Format: int32 */
            readonly produced?: number;
            /** Format: int32 */
            inventory?: number | null;
            /** Format: double */
            averageSellPrice?: number | null;
            /** Format: double */
            averageBuyPrice?: number | null;
            blueprintMetaData?: components["schemas"]["Item"];
            materialMetaData?: components["schemas"]["Item"];
            materialMarketHistory?: components["schemas"]["MarketRegionHistory"][] | null;
            marketStats?: components["schemas"]["MarketStat"][] | null;
        };
        PurchaseRequisition: {
            /** Format: int64 */
            stationId?: number;
            station?: components["schemas"]["Station"];
            /** Format: int32 */
            typeId?: number;
            name?: string | null;
            /** Format: int32 */
            quantity?: number;
            marketOrder?: components["schemas"]["MarketOrder"];
            /** Format: double */
            price?: number;
            item: components["schemas"]["Item"];
        };
        Region: {
            /** Format: int32 */
            regionId?: number;
            regionName?: string | null;
            /** Format: float */
            x?: number | null;
            /** Format: float */
            y?: number | null;
            /** Format: float */
            z?: number | null;
            /** Format: float */
            x_Min?: number | null;
            /** Format: float */
            x_Max?: number;
            /** Format: float */
            y_Min?: number | null;
            /** Format: float */
            y_Max?: number | null;
            /** Format: float */
            z_Min?: number | null;
            /** Format: float */
            z_Max?: number | null;
            /** Format: int32 */
            factionId?: number | null;
            /** Format: int32 */
            nameId?: number | null;
            /** Format: int32 */
            descriptionId?: number | null;
        };
        SolarSystem: {
            /** Format: int32 */
            solarSystemId?: number;
            solarSystemName?: string | null;
            /** Format: int32 */
            regionId?: number | null;
            /** Format: int32 */
            constellationId?: number | null;
            /** Format: float */
            x?: number | null;
            /** Format: float */
            y?: number | null;
            /** Format: float */
            z?: number | null;
            /** Format: float */
            x_Min?: number | null;
            /** Format: float */
            x_Max?: number | null;
            /** Format: float */
            y_Min?: number | null;
            /** Format: float */
            y_Max?: number | null;
            /** Format: float */
            z_Min?: number | null;
            /** Format: float */
            z_Max?: number | null;
            /** Format: float */
            luminosity?: number | null;
            border?: boolean | null;
            corridor?: boolean | null;
            fringe?: boolean | null;
            hub?: boolean | null;
            international?: boolean | null;
            regional?: boolean | null;
            /** Format: float */
            security?: number | null;
            /** Format: int32 */
            factionId?: number | null;
            /** Format: float */
            radius?: number | null;
            /** Format: int32 */
            sunTypeId?: number | null;
            securityClass?: string | null;
            /** Format: int32 */
            solarSystemNameId?: number | null;
            visualEffect?: string | null;
            /** Format: int32 */
            descriptionId?: number | null;
            /** Format: int32 */
            jumpDistance?: number | null;
        };
        Station: {
            /** Format: int32 */
            stationId?: number;
            /** Format: float */
            security?: number;
            /** Format: float */
            dockingCostPerVolume?: number;
            /** Format: float */
            maxShipVolumeDockable?: number;
            /** Format: int32 */
            officeRentalCost?: number;
            /** Format: int32 */
            operationId?: number;
            /** Format: int32 */
            stationTypeId?: number;
            /** Format: int32 */
            corporationId?: number;
            /** Format: int32 */
            solarSystemId?: number;
            solarSystem?: components["schemas"]["SolarSystem"];
            /** Format: int32 */
            constellationId?: number;
            /** Format: int32 */
            regionId?: number;
            stationName?: string | null;
            /** Format: float */
            x?: number;
            /** Format: float */
            y?: number;
            /** Format: float */
            z?: number;
            /** Format: float */
            reprocessingEfficiency?: number;
            /** Format: float */
            reprocessingStationsTake?: number;
            /** Format: int32 */
            reprocessingHangarFlag?: number;
        };
        StationBillOfMaterials: {
            /** Format: int64 */
            stationId?: number;
            station: components["schemas"]["Station"];
            purchaseRequisitions?: components["schemas"]["PurchaseRequisition"][] | null;
            readonly importStrings?: string[] | null;
        };
        SupplyPlan: {
            procurementPlans?: components["schemas"]["ProcurementPlan"][] | null;
            /** Format: double */
            readonly estimatedTotalCost?: number;
            /** Format: double */
            readonly totalVolume?: number;
        };
        ValidationProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
            errors?: {
                [key: string]: string[];
            } | null;
        } & {
            [key: string]: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
