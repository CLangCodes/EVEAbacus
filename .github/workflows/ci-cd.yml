name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'
  RESOURCE_GROUP: 'EVEAbacus'
  VM_NAME: ${{ secrets.VM_NAME }}

jobs:
  # Build and test backend
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore dependencies
        run: dotnet restore ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Clean publish-backend directory
        run: rm -rf ./publish-backend

      - name: Build backend
        run: dotnet build --no-restore --configuration Release ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Test backend
        run: dotnet test --no-build --verbosity normal ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Publish backend
        run: dotnet publish --configuration Release --output ./publish-backend --self-contained true -r linux-x64 ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Prepare backend artifacts
        run: |
          # Copy systemd service file to backend artifacts
          cp ./eveabacus-backend.service ./publish-backend/
          echo "Backend artifacts prepared:"
      
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: ./publish-backend
          retention-days: 1

  # Deploy backend to production
  deploy-backend:
    needs: [build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: ./backend-artifacts
      
      - name: Debug downloaded artifacts
        run: |
          echo "Checking downloaded artifacts..."
          echo "Backend artifacts:"
          ls -la ./backend-artifacts/ || echo "Backend artifacts not found"
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: List available VMs
        run: |
          echo "Available VMs in resource group ${{ env.RESOURCE_GROUP }}:"
          az vm list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].{Name:name, Status:powerState}" -o table
      
      - name: Deploy backend to Azure VM
        run: |
          # Stop backend service
          echo "Stopping backend service..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl stop eveabacus-backend 2>/dev/null || true
            "
          
          # Create storage account for large files
          echo "Setting up storage for backend deployment..."
          STORAGE_ACCOUNT_NAME="evebackend$(date +%s)"
          az storage account create \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location eastus \
            --sku Standard_LRS \
            --kind StorageV2
          
          # Get storage key
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query '[0].value' -o tsv)
          
          # Create container
          az storage container create \
            --name deployments \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY
          
          # Upload backend artifacts
          echo "Uploading backend artifacts..."
          tar -czf backend-artifacts.tar.gz -C ./backend-artifacts .
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name backend-artifacts.tar.gz \
            --file backend-artifacts.tar.gz
          
          # Deploy backend from storage
          echo "Deploying backend from storage..."
          # Generate SAS token for backend artifacts
          BACKEND_SAS=$(az storage blob generate-sas \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name backend-artifacts.tar.gz \
            --permissions r \
            --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%M:%SZ') \
            --full-uri \
            --output tsv)
          
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'Starting backend deployment...'
              sudo mkdir -p /var/www/eveabacus
              sudo rm -rf /var/www/eveabacus/*
              cd /tmp
              echo 'Downloading backend artifacts...'
              curl -L -o backend-artifacts.tar.gz \"$BACKEND_SAS\"
              echo 'Extracting backend artifacts...'
              echo 'Checking tar file contents before extraction:'
              tar -tzf backend-artifacts.tar.gz | head -20
              echo 'Extracting with verbose output:'
              tar -xzf backend-artifacts.tar.gz -C /var/www/eveabacus/
              echo 'Extracted backend contents:'
              ls -la /var/www/eveabacus/
              echo 'Checking for .NET DLL files:'
              find /var/www/eveabacus -name "*.dll" | head -5 || echo "No DLL files found"
              echo 'Checking for EVEAbacus.WebUI.dll specifically:'
              ls -la /var/www/eveabacus/EVEAbacus.WebUI.dll || echo 'EVEAbacus.WebUI.dll not found'
              echo 'Checking for systemd service file:'
              ls -la /var/www/eveabacus/eveabacus-backend.service || echo 'eveabacus-backend.service not found'
              
              # Copy systemd service file
              echo 'Copying systemd service file...'
              sudo cp /var/www/eveabacus/eveabacus-backend.service /etc/systemd/system/eveabacus-backend.service
              sudo chmod 644 /etc/systemd/system/eveabacus-backend.service
              
              echo 'Adding database connection string from secrets...'
              sudo sed -i '/Environment=ASPNETCORE_URLS/a Environment=ConnectionStrings__EVEAbacus=${{ secrets.CONNECTIONSTRINGS__BACKEND }}' /etc/systemd/system/eveabacus-backend.service
              
              echo 'Adding Redis password from secrets...'
              sudo sed -i '/Environment=ConnectionStrings__EVEAbacus/a Environment=REDIS__PASSWORD=${{ secrets.REDIS__PASSWORD }}' /etc/systemd/system/eveabacus-backend.service
              
              echo 'Adding ESISettings__SecretKey from secrets...'
              sudo sed -i '/Environment=REDIS__PASSWORD/a Environment=ESISettings__SecretKey=${{ secrets.ESISETTINGS__SECRETKEY }}' /etc/systemd/system/eveabacus-backend.service
              
              echo 'Setting permissions...'
              sudo chown -R eveabacus:eveabacus /var/www/eveabacus
              sudo chmod -R 755 /var/www/eveabacus
              
              sudo systemctl daemon-reload
              rm -f backend-artifacts.tar.gz
              echo 'Backend deployment complete'
            "
          
          echo "Cleaning up storage account..."
          az storage account delete \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yes
          
          # Start backend service
          echo "Starting backend service..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'Starting backend service...'
              # Start backend service if it exists
              if systemctl list-unit-files | grep -q eveabacus-backend.service; then
                echo 'Starting eveabacus-backend service...'
                sudo systemctl start eveabacus-backend
                echo 'Backend service started'
              else
                echo 'Warning: eveabacus-backend service not found'
              fi
            "
          
          echo "Waiting for backend to be ready..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'Checking if backend is ready...'
              echo 'Checking backend service status:'
              sudo systemctl status eveabacus-backend || echo 'Backend service not found or failed'
              echo 'Checking backend service logs:'
              sudo journalctl -u eveabacus-backend -n 10 --no-pager || echo 'No backend service logs found'
              echo 'Checking if port 5000 is listening:'
              sudo netstat -tlnp | grep :5000 || echo 'Port 5000 not listening'
              echo 'Checking backend process:'
              ps aux | grep eveabacus-backend || echo 'No eveabacus-backend process found'
              echo 'Checking Redis connection (port 6379):'
              sudo netstat -tlnp | grep :6379 || echo 'Redis not listening on port 6379'
              echo 'Testing Redis connection:'
              redis-cli -h localhost -p 6379 ping 2>/dev/null || echo 'Redis ping failed'
              
              for i in {1..30}; do
                echo 'Attempt $i: Testing backend health endpoint...'
                if curl -f http://localhost:5000/health 2>/dev/null; then
                  echo 'Backend is ready!'
                  exit 0
                else
                  echo 'Health check failed'
                  echo 'Trying to get more info:'
                  curl -v http://localhost:5000/health 2>&1 | head -10 || echo 'Curl failed completely'
                fi
                echo 'Waiting for backend to be ready... (attempt $i/30)'
                sleep 5
              done
              echo 'Backend may not be fully ready, but continuing...'
              echo 'Final backend service status:'
              sudo systemctl status eveabacus-backend || echo 'Backend service not found'
            "
          
          echo "Backend deployment completed successfully"
          echo "Summary: Backend should now be running and ready for frontend build"

  # Build frontend (after backend is deployed and running)
  build-frontend:
    needs: [deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ./eve-abacus-webui/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./eve-abacus-webui
      
      - name: Build frontend
        run: |
          echo "Building frontend with standalone output..."
          OPENAPI_SPEC_URL="https://blazor.eveabacus.com/swagger/v1/swagger.json" pnpm build
          echo "Build completed. Checking output..."
          ls -la .next/ || echo "No .next directory found after build"
          ls -la .next/standalone/ || echo "No standalone directory found after build"
          ls -la .next/static/ || echo "No static directory found after build"
        working-directory: ./eve-abacus-webui
      
      - name: Prepare frontend artifacts
        run: |
          echo "Preparing frontend artifacts..."
          
          # Debug: Check what was built
          echo "Checking build output..."
          ls -la ./eve-abacus-webui/.next/ || echo "No .next directory found"
          ls -la ./eve-abacus-webui/.next/standalone/ || echo "No standalone directory found"
          ls -la ./eve-abacus-webui/.next/static/ || echo "No static directory found"
          
          # Prepare the frontend-build directory
          mkdir -p ./frontend-build

          # Copy the standalone build directory if it exists
          if [ -d "./eve-abacus-webui/.next/standalone" ]; then
            echo "Found standalone directory, copying contents..."
            # Copy the entire standalone directory
            cp -r ./eve-abacus-webui/.next/standalone/. ./frontend-build/

            # Ensure the .next directory exists in the standalone build
            mkdir -p ./frontend-build/.next

            # Copy static directory if it exists
            if [ -d "./eve-abacus-webui/.next/static" ]; then
              echo "Found static directory, copying to ./frontend-build/static..."
              cp -r ./eve-abacus-webui/.next/static ./frontend-build/static
            else
              echo "WARNING: .next/static directory not found!"
            fi
            
            echo "Contents of frontend-build after copying:"
            ls -la ./frontend-build/
            echo "Contents of frontend-build/.next:"
            ls -la ./frontend-build/.next/ || echo "No .next directory in frontend-build"
          else
            # If standalone directory does not exist, print an error and exit
            echo "standalone directory not found - cannot copy"
            echo "Available directories in .next:"
            ls -la ./eve-abacus-webui/.next/ || echo "No .next directory found"
            exit 1
          fi

          # Copy the public directory for static assets if it exists
          if [ -d "./eve-abacus-webui/public" ]; then
            cp -r ./eve-abacus-webui/public ./frontend-build/
          fi

          # Copy the systemd service file if it exists
          if [ -f "./eveabacus-frontend.service" ]; then
            cp ./eveabacus-frontend.service ./frontend-build/
          fi

          echo "Final artifacts structure:"
          find ./frontend-build -type d | head -10
        working-directory: ./
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: ./frontend-build
          retention-days: 1

  # Deploy frontend to production
  deploy-frontend:
    needs: [build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: ./frontend-artifacts
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy frontend to Azure VM
        run: |
          # Stop frontend service
          echo "Stopping frontend service..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl stop eveabacus-frontend 2>/dev/null || true
            "
          
          # Create storage account for large files
          echo "Setting up storage for frontend deployment..."
          STORAGE_ACCOUNT_NAME="evefrontend$(date +%s)"
          az storage account create \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location eastus \
            --sku Standard_LRS \
            --kind StorageV2
          
          # Get storage key
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query '[0].value' -o tsv)
          
          # Create container
          az storage container create \
            --name deployments \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY
          
          # Upload frontend artifacts
          echo "Uploading frontend artifacts..."
          tar -czf frontend-artifacts.tar.gz -C ./frontend-artifacts .
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name frontend-artifacts.tar.gz \
            --file frontend-artifacts.tar.gz
          
          # Deploy frontend from storage
          echo "Deploying frontend from storage..."
          # Generate SAS token for frontend artifacts
          FRONTEND_SAS=$(az storage blob generate-sas \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name frontend-artifacts.tar.gz \
            --permissions r \
            --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%M:%SZ') \
            --full-uri \
            --output tsv)
          
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'Starting frontend deployment...'
              
              # Completely clean the eveabacus/frontend directory
              echo 'Cleaning /var/www/eveabacus/frontend/ directory...'
              sudo rm -rf /var/www/eveabacus/frontend/.
              sudo mkdir -p /var/www/eveabacus/frontend
              
              # Completely clean the deploy-frontend directory
              echo 'Cleaning /tmp/deploy-frontend directory'
              rm -rf /tmp/deploy-frontend
              mkdir /tmp/deploy-frontend

              # Download frontend artifacts
              cd /tmp/deploy-frontend
              echo 'Downloading frontend artifacts...'
              curl -L -o frontend-artifacts.tar.gz \"$FRONTEND_SAS\"
              echo 'Extracting frontend artifacts with verbose output:'
              tar -xzf frontend-artifacts.tar.gz
              
              # Debug: Check what was extracted
              echo 'Contents of extracted artifacts:'
              ls -la /tmp/deploy-frontend/
              echo 'Checking for .next directory:'
              ls -la /tmp/deploy-frontend/.next/ || echo 'No .next directory found in artifacts'
              
              # Copy only the frontend build files
              echo 'Copying frontend build files...'
              sudo cp -r /tmp/deploy-frontend/* /var/www/eveabacus/frontend/ 2>/dev/null || echo 'Failed to copy frontend files'
              
              # Move static directory into .next if it exists
              if [ -d "/var/www/eveabacus/frontend/static" ]; then
                echo 'Moving static directory into .next...'
                sudo mkdir -p /var/www/eveabacus/frontend/.next
                sudo mv /var/www/eveabacus/frontend/static /var/www/eveabacus/frontend/.next/static
              fi

              # Check if server.js exists, fail if not
              if [ ! -f "/var/www/eveabacus/frontend/server.js" ]; then
                echo 'ERROR: /var/www/eveabacus/frontend/server.js not found! Failing deployment.'
                exit 1
              fi

              # Clean up deployment directory
              # echo 'Testing failed if you see this'
              # rm -rf /tmp/deploy-frontend
              
              # Clean up any leftover system files that might have been copied
              echo 'Cleaning up any leftover system files...'
              sudo find /var/www/eveabacus/frontend -name "clr-debug-pipe-*" -delete 2>/dev/null || true
              sudo find /var/www/eveabacus/frontend -name "dotnet-diagnostic-*" -delete 2>/dev/null || true
              sudo find /var/www/eveabacus/frontend -name "systemd-private-*" -delete 2>/dev/null || true
              sudo find /var/www/eveabacus/frontend -name "snap-private-tmp" -delete 2>/dev/null || true
              sudo find /var/www/eveabacus/frontend -name "frontend-artifacts.tar.gz" -delete 2>/dev/null || true
              
              echo 'Setting permissions...'
              sudo chown -R www-data:www-data /var/www/eveabacus/frontend
              sudo chmod -R 755 /var/www/eveabacus/frontend
              echo 'Checking if node is available:'
              which node || echo 'node not found in PATH'
              node --version || echo 'node version check failed'
              rm -f frontend-artifacts.tar.gz
              echo 'Frontend deployment complete'
            "
          
          # Clean up storage account
          echo "Cleaning up storage account..."
          az storage account delete \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yes
          
          # Start frontend service and reload nginx
          echo "Starting frontend service and reloading nginx..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'Starting frontend service and reloading nginx...'
              
              # Update the service configuration
              echo 'Updating frontend service configuration...'
              sudo systemctl stop eveabacus-frontend 2>/dev/null || true
              sudo rm -f /etc/systemd/system/eveabacus-frontend.service
              
              # Copy the service file from the repository
              echo 'Copying systemd service file...'
              if [ -f '/var/www/eveabacus/frontend/eveabacus-frontend.service' ]; then
                sudo cp /var/www/eveabacus/frontend/eveabacus-frontend.service /etc/systemd/system/eveabacus-frontend.service
                sudo chmod 644 /etc/systemd/system/eveabacus-frontend.service
                echo 'Service file copied successfully'
              else
                echo ' Service file not found in frontend directory, trying repository root'
                # Try to copy from the repository root if not in frontend directory
                if [ -f '/var/www/eveabacus/eveabacus-frontend.service' ]; then
                  sudo cp /var/www/eveabacus/eveabacus-frontend.service /etc/systemd/system/eveabacus-frontend.service
                  sudo chmod 644 /etc/systemd/system/eveabacus-frontend.service
                  echo 'Service file copied from repository root'
                else
                  echo 'Service file not found anywhere - service may not start properly'
                fi
              fi
              
              # Reload systemd to pick up the new configuration
              sudo systemctl daemon-reload
              
              # Start frontend service if it exists
              if systemctl list-unit-files | grep -q eveabacus-frontend.service; then
                echo 'Starting eveabacus-frontend service...'
                sudo systemctl start eveabacus-frontend
                echo 'Waiting for frontend service to start...'
                sleep 1
                if systemctl is-active --quiet eveabacus-frontend; then
                  echo 'Frontend service started successfully'
                else
                  echo ' Frontend service failed to start'
                  echo 'Service status:'
                  sudo systemctl status eveabacus-frontend
                  echo 'Recent logs:'
                  sudo journalctl -u eveabacus-frontend -n 20 --no-pager
                  echo 'Checking if files exist:'
                  ls -la /var/www/eveabacus/frontend/ || echo 'Frontend directory not found'
                  ls -la /var/www/eveabacus/frontend/standalone/ || echo 'standalone directory not found'
                  ls -la /var/www/eveabacus/frontend/standalone/server.js || echo 'server.js not found'
                fi
              else
                echo ' eveabacus-frontend service not found'
              fi
              
              # Reload nginx if it exists
              if systemctl list-unit-files | grep -q nginx.service; then
                echo 'Reloading nginx...'
                sudo systemctl reload nginx
              else
                echo ' nginx service not found'
              fi
              
              echo 'Frontend deployment and service startup complete'
            " 