name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'
  AZURE_HOST: ${{ secrets.AZURE_HOST }}
  AZURE_USER: ${{ secrets.AZURE_USER }}

jobs:
  # Build and test backend
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore dependencies
        run: dotnet restore ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Build backend
        run: dotnet build --no-restore --configuration Release ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Test backend
        run: dotnet test --no-build --verbosity normal ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Publish backend
        run: dotnet publish --configuration Release --output ./publish-backend ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: ./publish-backend
          retention-days: 1

  # Build frontend
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ./eve-abacus-webui/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./eve-abacus-webui
      
      - name: Build frontend
        run: pnpm build
        working-directory: ./eve-abacus-webui
      
      - name: Check if build artifacts exist
        run: |
          if [ ! -d "./eve-abacus-webui/.next" ]; then
            echo "❌ Frontend build failed - .next directory not found"
            exit 1
          fi
          echo "✅ Frontend build artifacts found"
          ls -la ./eve-abacus-webui/.next/
          
          # Check for standalone output
          if [ -d "./eve-abacus-webui/.next/standalone" ]; then
            echo "✅ Standalone output found"
            ls -la ./eve-abacus-webui/.next/standalone/
          else
            echo "⚠️  Standalone output not found, using regular .next directory"
          fi
        working-directory: ./
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: |
            ./eve-abacus-webui/.next
            ./eve-abacus-webui/public
          retention-days: 1

  # Deploy to production
  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: ./backend-artifacts
      
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: ./frontend-artifacts
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to Azure VM
        run: |
          # Stop services
          az vm run-command invoke \
            --resource-group EVEAbacus \
            --name EVEAbacus-vm \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl stop eveabacus 2>/dev/null || true
              sudo systemctl stop eveabacus-frontend 2>/dev/null || true
            "
          
          # Deploy backend
          az vm run-command invoke \
            --resource-group EVEAbacus \
            --name EVEAbacus-vm \
            --command-id RunShellScript \
            --scripts "
              sudo mkdir -p /var/www/eveabacus
              sudo cp -r /tmp/backend-artifacts/* /var/www/eveabacus/
              sudo chown -R eveabacus:eveabacus /var/www/eveabacus
              sudo chmod -R 755 /var/www/eveabacus
            "
          
          # Deploy frontend
          az vm run-command invoke \
            --resource-group EVEAbacus \
            --name EVEAbacus-vm \
            --command-id RunShellScript \
            --scripts "
              sudo mkdir -p /var/www/eveabacus/frontend
              if [ -d '/tmp/frontend-artifacts/.next/standalone' ]; then
                sudo cp -r /tmp/frontend-artifacts/.next/standalone/* /var/www/eveabacus/frontend/
              else
                sudo cp -r /tmp/frontend-artifacts/.next /var/www/eveabacus/frontend/
                sudo cp -r /tmp/frontend-artifacts/public /var/www/eveabacus/frontend/
              fi
              sudo chown -R eveabacus:eveabacus /var/www/eveabacus/frontend
              sudo chmod -R 755 /var/www/eveabacus/frontend
            "
          
          # Start services
          az vm run-command invoke \
            --resource-group EVEAbacus \
            --name EVEAbacus-vm \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl start eveabacus
              sudo systemctl start eveabacus-frontend
              sudo systemctl reload nginx
            "
      
      - name: Copy artifacts to VM
        run: |
          # Copy backend artifacts to VM
          az vm run-command invoke \
            --resource-group EVEAbacus \
            --name EVEAbacus-vm \
            --command-id RunShellScript \
            --scripts "rm -rf /tmp/backend-artifacts"
          
          # Use az vm run-command to copy files
          tar -czf backend-artifacts.tar.gz -C ./backend-artifacts .
          az vm run-command invoke \
            --resource-group EVEAbacus \
            --name EVEAbacus-vm \
            --command-id RunShellScript \
            --scripts "
              mkdir -p /tmp/backend-artifacts
              cd /tmp/backend-artifacts
              tar -xzf /tmp/backend-artifacts.tar.gz
            " \
            --scripts @backend-artifacts.tar.gz
          
          # Copy frontend artifacts to VM
          az vm run-command invoke \
            --resource-group EVEAbacus \
            --name EVEAbacus-vm \
            --command-id RunShellScript \
            --scripts "rm -rf /tmp/frontend-artifacts"
          
          tar -czf frontend-artifacts.tar.gz -C ./frontend-artifacts .
          az vm run-command invoke \
            --resource-group EVEAbacus \
            --name EVEAbacus-vm \
            --command-id RunShellScript \
            --scripts "
              mkdir -p /tmp/frontend-artifacts
              cd /tmp/frontend-artifacts
              tar -xzf /tmp/frontend-artifacts.tar.gz
            " \
            --scripts @frontend-artifacts.tar.gz 