name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore dependencies
        run: dotnet restore ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Build backend
        run: dotnet build --no-restore --configuration Release ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Test backend
        run: dotnet test --no-build --verbosity normal ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        run: npm install -g pnpm
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./eve-abacus-webui
      
      - name: Build frontend
        run: pnpm build
        working-directory: ./eve-abacus-webui

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        run: npm install -g pnpm
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./eve-abacus-webui
      
      - name: Build frontend
        run: pnpm build
        working-directory: ./eve-abacus-webui
      
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          script: |
            # Check current directory structure
            echo "Current directory: $(pwd)"
            echo "Contents of /var/www/:"
            ls -la /var/www/
            
            # Check if we're in the right directory and if git repo exists
            cd /var/www/eveabacus
            
            if [ ! -d ".git" ]; then
              echo "Git repository not found. Skipping git pull."
            else
              # Pull latest changes
              git pull origin main
            fi
            
            # Check if backend directory exists - try different possible locations
            if [ -d "EVEAbacus.WebUI" ]; then
              echo "Found EVEAbacus.WebUI directory"
              cd EVEAbacus.WebUI
              dotnet publish --configuration Release --output /var/www/eveabacus
            elif [ -f "EVEAbacus.WebUI.csproj" ]; then
              echo "Found EVEAbacus.WebUI.csproj in current directory"
              dotnet publish --configuration Release --output /var/www/eveabacus
            else
              echo "Backend project not found. Current directory contents:"
              ls -la
              echo "Skipping backend build."
            fi
            
            # Restart the backend service
            sudo systemctl restart eveabacus
            
            # Clean up and prepare frontend directory
            echo "Preparing frontend directory..."
            sudo rm -rf /var/www/eveabacus/frontend
            sudo mkdir -p /var/www/eveabacus/frontend
            sudo chown -R www-data:www-data /var/www/eveabacus/frontend
            
            # Re-enable frontend service for standalone mode
            sudo systemctl enable eveabacus-frontend 2>/dev/null || true
            sudo systemctl restart eveabacus-frontend 2>/dev/null || true
            
            # Check if frontend files exist and build them
            echo "Checking for frontend files..."
            
            if [ -d "/var/www/eveabacus/frontend/src" ]; then
              echo "Frontend source files found, building on server..."
              cd /var/www/eveabacus/frontend
              
              # Install dependencies with better rate limit handling
              echo "Installing frontend dependencies..."
              
              # Install pnpm if not available
              if ! command -v pnpm &> /dev/null; then
                echo "Installing pnpm..."
                npm install -g pnpm
              fi
              
              # Try pnpm first, fallback to npm if rate limited
              if command -v pnpm &> /dev/null; then
                echo "Using pnpm for dependency installation..."
                # Add retry logic for pnpm
                for i in {1..3}; do
                  if pnpm install --frozen-lockfile --network-timeout=60000; then
                    echo "pnpm install successful"
                    break
                  else
                    echo "pnpm install failed (attempt $i/3), trying npm..."
                    if npm install --prefer-offline --no-audit; then
                      echo "npm install successful"
                      break
                    fi
                    if [ $i -lt 3 ]; then
                      echo "Waiting 30 seconds before retry..."
                      sleep 30
                    fi
                  fi
                done
              else
                echo "pnpm not available, using npm..."
                npm install --prefer-offline --no-audit
              fi
              
              # Build the frontend
              echo "Building frontend..."
              if command -v pnpm &> /dev/null && [ -f "pnpm-lock.yaml" ]; then
                pnpm build
              else
                npm run build
              fi
              
              # Check if standalone directory exists
              if [ -d "/var/www/eveabacus/frontend/.next/standalone" ]; then
                echo "Standalone directory found - frontend service should work"
                ls -la /var/www/eveabacus/frontend/.next/standalone/
              else
                echo "Standalone directory not found - check build configuration"
                echo "Contents of .next directory:"
                ls -la /var/www/eveabacus/frontend/.next/
              fi
              
              echo "Frontend built successfully"
            else
              echo "Frontend source files not found at /var/www/eveabacus/frontend/src"
              # List contents to debug
              echo "Contents of /var/www/eveabacus/:"
              ls -la /var/www/eveabacus/
              if [ -d "/var/www/eveabacus/frontend" ]; then
                echo "Contents of /var/www/eveabacus/frontend/:"
                ls -la /var/www/eveabacus/frontend/
              else
                echo "/var/www/eveabacus/frontend/ directory does not exist"
              fi
            fi
            
            # Reload nginx
            sudo systemctl reload nginx
            
            echo "Deployment completed successfully!"
      
      - name: Copy frontend files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          source: "eve-abacus-webui/src,eve-abacus-webui/public,eve-abacus-webui/next.config.ts,eve-abacus-webui/package.json,eve-abacus-webui/package-lock.json,eve-abacus-webui/pnpm-lock.yaml,eve-abacus-webui/tsconfig.json,eve-abacus-webui/postcss.config.mjs,eve-abacus-webui/eslint.config.mjs,eve-abacus-webui/next-env.d.ts"
          target: "/var/www/eveabacus/frontend/"
          strip_components: 1 