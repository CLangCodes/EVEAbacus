name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'
  AZURE_HOST: ${{ secrets.AZURE_HOST }}
  AZURE_USER: ${{ secrets.AZURE_USER }}

jobs:
  # Build and test backend
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore dependencies
        run: dotnet restore ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Build backend
        run: dotnet build --no-restore --configuration Release ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Test backend
        run: dotnet test --no-build --verbosity normal ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Publish backend
        run: dotnet publish --configuration Release --output ./publish-backend ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: ./publish-backend
          retention-days: 1

  # Build frontend
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ./eve-abacus-webui/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./eve-abacus-webui
      
      - name: Build frontend
        run: pnpm build
        working-directory: ./eve-abacus-webui
      
      - name: Check if build artifacts exist
        run: |
          if [ ! -d "./eve-abacus-webui/.next" ]; then
            echo "❌ Frontend build failed - .next directory not found"
            exit 1
          fi
          echo "✅ Frontend build artifacts found"
          ls -la ./eve-abacus-webui/.next/
          
          # Check for standalone output
          if [ -d "./eve-abacus-webui/.next/standalone" ]; then
            echo "✅ Standalone output found"
            ls -la ./eve-abacus-webui/.next/standalone/
          else
            echo "⚠️  Standalone output not found, using regular .next directory"
          fi
        working-directory: ./
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: |
            ./eve-abacus-webui/.next
            ./eve-abacus-webui/public
          retention-days: 1

  # Deploy to production
  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: ./backend-artifacts
      
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: ./frontend-artifacts
      
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.AZURE_HOST }}
          username: ${{ env.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          script: |
            set -e  # Exit on any error
            
            echo "Starting deployment..."
            
            # Create backup of current deployment
            if [ -d "/var/www/eveabacus" ]; then
              echo "Creating backup..."
              sudo cp -r /var/www/eveabacus /var/www/eveabacus.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            # Stop services before deployment
            echo "Stopping services..."
            sudo systemctl stop eveabacus 2>/dev/null || true
            sudo systemctl stop eveabacus-frontend 2>/dev/null || true
            
            # Deploy backend
            echo "Deploying backend..."
            sudo mkdir -p /var/www/eveabacus
            sudo cp -r /tmp/backend-artifacts/* /var/www/eveabacus/
            sudo chown -R eveabacus:eveabacus /var/www/eveabacus
            sudo chmod -R 755 /var/www/eveabacus
            
            # Deploy frontend
            echo "Deploying frontend..."
            sudo mkdir -p /var/www/eveabacus/frontend
            
            # Debug: Check what artifacts we have
            echo "Frontend artifacts contents:"
            ls -la /tmp/frontend-artifacts/
            if [ -d "/tmp/frontend-artifacts/.next" ]; then
              echo ".next directory contents:"
              ls -la /tmp/frontend-artifacts/.next/
            fi
            
            # Check if we have standalone output
            if [ -d "/tmp/frontend-artifacts/.next/standalone" ]; then
              echo "Using standalone output..."
              sudo cp -r /tmp/frontend-artifacts/.next/standalone/* /var/www/eveabacus/frontend/
            else
              echo "Using regular .next output..."
              sudo cp -r /tmp/frontend-artifacts/.next /var/www/eveabacus/frontend/
              sudo cp -r /tmp/frontend-artifacts/public /var/www/eveabacus/frontend/
            fi
            
            sudo chown -R eveabacus:eveabacus /var/www/eveabacus/frontend
            sudo chmod -R 755 /var/www/eveabacus/frontend
            
            # Start services
            echo "Starting services..."
            sudo systemctl start eveabacus
            sudo systemctl start eveabacus-frontend
            
            # Verify services are running
            echo "Verifying services..."
            if sudo systemctl is-active --quiet eveabacus; then
              echo "✅ Backend service is running"
            else
              echo "❌ Backend service failed to start"
              sudo systemctl status eveabacus
              exit 1
            fi
            
            if sudo systemctl is-active --quiet eveabacus-frontend; then
              echo "✅ Frontend service is running"
            else
              echo "❌ Frontend service failed to start"
              sudo systemctl status eveabacus-frontend
              exit 1
            fi
            
            # Reload nginx
            echo "Reloading nginx..."
            sudo systemctl reload nginx
            
            # Clean up old backups (keep last 5)
            echo "Cleaning up old backups..."
            sudo find /var/www -name "eveabacus.backup.*" -type d | sort | head -n -5 | xargs -r sudo rm -rf
            
            echo "✅ Deployment completed successfully!"
      
      - name: Copy backend artifacts to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.AZURE_HOST }}
          username: ${{ env.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          source: "backend-artifacts/"
          target: "/tmp/"
      
      - name: Copy frontend artifacts to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.AZURE_HOST }}
          username: ${{ env.AZURE_USER }}
          key: ${{ secrets.AZURE_SSH_KEY }}
          source: "frontend-artifacts/"
          target: "/tmp/" 