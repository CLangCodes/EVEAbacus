name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'
  AZURE_HOST: ${{ secrets.AZURE_HOST }}
  AZURE_USER: ${{ secrets.AZURE_USER }}
  RESOURCE_GROUP: 'EVEAbacus'
  VM_NAME: ${{ secrets.VM_NAME }}

jobs:
  # Build and test backend
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore dependencies
        run: dotnet restore ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Build backend
        run: dotnet build --no-restore --configuration Release ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Test backend
        run: dotnet test --no-build --verbosity normal ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Publish backend
        run: dotnet publish --configuration Release --output ./publish-backend ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: ./publish-backend
          retention-days: 1

  # Build frontend
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ./eve-abacus-webui/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./eve-abacus-webui
      
      - name: Build frontend
        run: pnpm build
        working-directory: ./eve-abacus-webui
      
      - name: Check if build artifacts exist
        run: |
          if [ ! -d "./eve-abacus-webui/.next" ]; then
            echo "‚ùå Frontend build failed - .next directory not found"
            exit 1
          fi
          echo "‚úÖ Frontend build artifacts found"
          ls -la ./eve-abacus-webui/.next/
          
          # Check for standalone output
          if [ -d "./eve-abacus-webui/.next/standalone" ]; then
            echo "‚úÖ Standalone output found"
            ls -la ./eve-abacus-webui/.next/standalone/
          else
            echo "‚ö†Ô∏è  Standalone output not found, using regular .next directory"
          fi
        working-directory: ./
      
      - name: Debug frontend artifacts
        run: |
          echo "üìÅ Frontend artifacts to be uploaded:"
          echo "Contents of .next directory:"
          find ./eve-abacus-webui/.next -type f -name "*.js" | head -10
          echo ""
          echo "Contents of public directory:"
          ls -la ./eve-abacus-webui/public/
        working-directory: ./
      
      - name: Prepare frontend artifacts
        run: |
          mkdir -p ./frontend-build
          cp -r ./eve-abacus-webui/.next ./frontend-build/
          cp -r ./eve-abacus-webui/public ./frontend-build/
        working-directory: ./
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: ./frontend-build
          retention-days: 1

  # Deploy to production
  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: ./backend-artifacts
      
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: ./frontend-artifacts
      
      - name: Debug downloaded artifacts
        run: |
          echo "üîç Checking downloaded artifacts..."
          echo "Backend artifacts:"
          ls -la ./backend-artifacts/ || echo "Backend artifacts not found"
          echo ""
          echo "Frontend artifacts:"
          ls -la ./frontend-artifacts/ || echo "Frontend artifacts not found"
          echo ""
          echo "Frontend .next directory:"
          ls -la ./frontend-artifacts/.next/ || echo ".next directory not found"
          echo ""
          echo "Frontend public directory:"
          ls -la ./frontend-artifacts/public/ || echo "public directory not found"
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: List available VMs
        run: |
          echo "Available VMs in resource group ${{ env.RESOURCE_GROUP }}:"
          az vm list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].{Name:name, Status:powerState}" -o table
      
      - name: Deploy to Azure VM
        run: |
          # Stop services
          echo "Stopping services..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl stop eveabacus 2>/dev/null || true
              sudo systemctl stop eveabacus-frontend 2>/dev/null || true
            "
          
          # Create storage account for large files
          echo "Setting up storage for large files..."
          STORAGE_ACCOUNT_NAME="eveabacusdeploy$(date +%s)"
          az storage account create \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location eastus \
            --sku Standard_LRS \
            --kind StorageV2
          
          # Get storage key
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query '[0].value' -o tsv)
          
          # Create container
          az storage container create \
            --name deployments \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY
          
          # Upload backend artifacts
          echo "Uploading backend artifacts..."
          tar -czf backend-artifacts.tar.gz -C ./backend-artifacts .
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name backend-artifacts.tar.gz \
            --file backend-artifacts.tar.gz
          
          # Upload frontend artifacts
          echo "Uploading frontend artifacts..."
          tar -czf frontend-artifacts.tar.gz -C ./frontend-artifacts .
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name frontend-artifacts.tar.gz \
            --file frontend-artifacts.tar.gz
          
          # Deploy backend from storage
          echo "Deploying backend from storage..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'üîç Starting backend deployment...'
              sudo mkdir -p /var/www/eveabacus
              sudo rm -rf /var/www/eveabacus/*
              cd /tmp
              echo 'üì• Downloading backend artifacts...'
              az storage blob download \
                --account-name $STORAGE_ACCOUNT_NAME \
                --account-key $STORAGE_KEY \
                --container-name deployments \
                --name backend-artifacts.tar.gz \
                --file backend-artifacts.tar.gz
              echo 'üì¶ Extracting backend artifacts...'
              tar -xzf backend-artifacts.tar.gz -C /var/www/eveabacus/
              echo 'üîß Setting permissions...'
              sudo chown -R eveabacus:eveabacus /var/www/eveabacus
              sudo chmod -R 755 /var/www/eveabacus
              echo 'üìÅ Backend deployment contents:'
              ls -la /var/www/eveabacus/
              rm backend-artifacts.tar.gz
              echo '‚úÖ Backend deployment complete'
            "
          
          # Deploy frontend from storage
          echo "Deploying frontend from storage..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'üîç Starting frontend deployment...'
              sudo mkdir -p /var/www/eveabacus/frontend
              sudo rm -rf /var/www/eveabacus/frontend/*
              cd /tmp
              echo 'üì• Downloading frontend artifacts...'
              az storage blob download \
                --account-name $STORAGE_ACCOUNT_NAME \
                --account-key $STORAGE_KEY \
                --container-name deployments \
                --name frontend-artifacts.tar.gz \
                --file frontend-artifacts.tar.gz
              echo 'üì¶ Extracting frontend artifacts...'
              tar -xzf frontend-artifacts.tar.gz
              echo 'üìÅ Extracted frontend contents:'
              ls -la /tmp/
              echo 'üìÅ frontend-build directory contents:'
              ls -la /tmp/frontend-build/ || echo 'frontend-build directory not found'
              echo 'üìÅ .next directory contents:'
              ls -la /tmp/frontend-build/.next/ || echo '.next directory not found'
              echo 'üìÅ public directory contents:'
              ls -la /tmp/frontend-build/public/ || echo 'public directory not found'
              if [ -d '/tmp/frontend-build/.next/standalone' ]; then
                echo 'üöÄ Using standalone build...'
                sudo cp -r /tmp/frontend-build/.next/standalone/* /var/www/eveabacus/frontend/
              else
                echo 'üìÅ Using regular build...'
                sudo cp -r /tmp/frontend-build/.next /var/www/eveabacus/frontend/
                sudo cp -r /tmp/frontend-build/public /var/www/eveabacus/frontend/
              fi
              echo 'üîß Setting permissions...'
              sudo chown -R eveabacus:eveabacus /var/www/eveabacus/frontend
              sudo chmod -R 755 /var/www/eveabacus/frontend
              echo 'üìÅ Frontend deployment contents:'
              ls -la /var/www/eveabacus/frontend/
              rm frontend-artifacts.tar.gz
              echo '‚úÖ Frontend deployment complete'
            "
          
          # Clean up storage account
          echo "Cleaning up storage account..."
          az storage account delete \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yes
          
          # Start services
          echo "Starting services..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl start eveabacus
              sudo systemctl start eveabacus-frontend
              sudo systemctl reload nginx
            " 