name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'
  AZURE_HOST: ${{ secrets.AZURE_HOST }}
  AZURE_USER: ${{ secrets.AZURE_USER }}
  RESOURCE_GROUP: 'EVEAbacus'
  VM_NAME: ${{ secrets.VM_NAME }}

jobs:
  # Build and test backend
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore dependencies
        run: dotnet restore ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Build backend
        run: dotnet build --no-restore --configuration Release ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Test backend
        run: dotnet test --no-build --verbosity normal ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Publish backend
        run: dotnet publish --configuration Release --output ./publish-backend ./EVEAbacus.WebUI/EVEAbacus.WebUI.csproj
      
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: ./publish-backend
          retention-days: 1

  # Deploy backend to production
  deploy-backend:
    needs: [build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-artifacts
          path: ./backend-artifacts
      
      - name: Debug downloaded artifacts
        run: |
          echo "üîç Checking downloaded artifacts..."
          echo "Backend artifacts:"
          ls -la ./backend-artifacts/ || echo "Backend artifacts not found"
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: List available VMs
        run: |
          echo "Available VMs in resource group ${{ env.RESOURCE_GROUP }}:"
          az vm list --resource-group ${{ env.RESOURCE_GROUP }} --query "[].{Name:name, Status:powerState}" -o table
      
      - name: Deploy backend to Azure VM
        run: |
          # Stop backend service
          echo "Stopping backend service..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl stop eveabacus 2>/dev/null || true
            "
          
          # Create storage account for large files
          echo "Setting up storage for backend deployment..."
          STORAGE_ACCOUNT_NAME="evebackend$(date +%s)"
          az storage account create \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location eastus \
            --sku Standard_LRS \
            --kind StorageV2
          
          # Get storage key
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query '[0].value' -o tsv)
          
          # Create container
          az storage container create \
            --name deployments \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY
          
          # Upload backend artifacts
          echo "Uploading backend artifacts..."
          tar -czf backend-artifacts.tar.gz -C ./backend-artifacts .
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name backend-artifacts.tar.gz \
            --file backend-artifacts.tar.gz
          
          # Deploy backend from storage
          echo "Deploying backend from storage..."
          # Generate SAS token for backend artifacts
          BACKEND_SAS=$(az storage blob generate-sas \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name backend-artifacts.tar.gz \
            --permissions r \
            --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%M:%SZ') \
            --full-uri \
            --output tsv)
          
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'üîç Starting backend deployment...'
              sudo mkdir -p /var/www/eveabacus
              sudo rm -rf /var/www/eveabacus/*
              cd /tmp
              echo 'üì• Downloading backend artifacts...'
              curl -L -o backend-artifacts.tar.gz \"$BACKEND_SAS\"
              echo 'üì¶ Extracting backend artifacts...'
              tar -xzf backend-artifacts.tar.gz -C /var/www/eveabacus/
              echo 'üîß Setting permissions...'
              sudo chown -R eveabacus:eveabacus /var/www/eveabacus
              sudo chmod -R 755 /var/www/eveabacus
              echo 'üìÅ Backend deployment contents:'
              ls -la /var/www/eveabacus/
              rm -f backend-artifacts.tar.gz
              echo '‚úÖ Backend deployment complete'
            "
          
          # Clean up storage account
          echo "Cleaning up storage account..."
          az storage account delete \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yes
          
          # Start backend service
          echo "Starting backend service..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'üîß Starting backend service...'
              # Start backend service if it exists
              if systemctl list-unit-files | grep -q eveabacus.service; then
                echo 'üöÄ Starting eveabacus service...'
                sudo systemctl start eveabacus
                echo '‚è≥ Waiting for backend to be ready...'
                sleep 10
                echo '‚úÖ Backend service started'
              else
                echo '‚ö†Ô∏è  eveabacus service not found'
              fi
            "
          
          # Wait for backend to be ready
          echo "Waiting for backend to be ready..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'üîç Checking if backend is ready...'
              for i in {1..30}; do
                if curl -f http://localhost:5000/health 2>/dev/null; then
                  echo '‚úÖ Backend is ready!'
                  exit 0
                fi
                echo '‚è≥ Waiting for backend to be ready... (attempt $i/30)'
                sleep 5
              done
              echo '‚ö†Ô∏è  Backend may not be fully ready, but continuing...'
            "

  # Build frontend (after backend is deployed and running)
  build-frontend:
    needs: [deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Setup Next.js cache
        uses: actions/cache@v4
        with:
          path: |
            ./eve-abacus-webui/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-nextjs-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./eve-abacus-webui
      
      - name: Build frontend
        run: pnpm build
        working-directory: ./eve-abacus-webui
      
      - name: Check if build artifacts exist
        run: |
          if [ ! -d "./eve-abacus-webui/.next" ]; then
            echo "‚ùå Frontend build failed - .next directory not found"
            exit 1
          fi
          echo "‚úÖ Frontend build artifacts found"
          ls -la ./eve-abacus-webui/.next/
          
          # Check for BUILD_ID file (required for production builds)
          echo "üìÅ Checking for BUILD_ID file:"
          if [ -f "./eve-abacus-webui/.next/BUILD_ID" ]; then
            echo "‚úÖ BUILD_ID found: $(cat ./eve-abacus-webui/.next/BUILD_ID)"
          else
            echo "‚ùå BUILD_ID not found - this is required for production builds"
          fi
          
          # Check for server directory
          echo "üìÅ Checking for server directory:"
          if [ -d "./eve-abacus-webui/.next/server" ]; then
            echo "‚úÖ Server directory found"
            ls -la ./eve-abacus-webui/.next/server/
          else
            echo "‚ùå Server directory not found"
          fi
          
          # Check for static directory
          echo "üìÅ Checking for static directory:"
          if [ -d "./eve-abacus-webui/.next/static" ]; then
            echo "‚úÖ Static directory found"
            ls -la ./eve-abacus-webui/.next/static/
          else
            echo "‚ùå Static directory not found"
          fi
          
          # Check for standalone output
          if [ -d "./eve-abacus-webui/.next/standalone" ]; then
            echo "‚úÖ Standalone output found"
            ls -la ./eve-abacus-webui/.next/standalone/
            echo "üìÅ Checking for server.js in standalone:"
            if [ -f "./eve-abacus-webui/.next/standalone/server.js" ]; then
              echo "‚úÖ server.js found in standalone build"
            else
              echo "‚ö†Ô∏è  server.js not found in standalone build"
              echo "üìÅ Available files in standalone:"
              find ./eve-abacus-webui/.next/standalone -type f -name "*.js" | head -10
              echo "üìÅ All files in standalone:"
              ls -la ./eve-abacus-webui/.next/standalone/
            fi
          else
            echo "‚ö†Ô∏è  Standalone output not found, using regular .next directory"
            echo "üìÅ Available files in .next:"
            find ./eve-abacus-webui/.next -type f -name "*.js" | head -10
            echo "üìÅ All directories in .next:"
            ls -la ./eve-abacus-webui/.next/
          fi
        working-directory: ./
      
      - name: Debug frontend artifacts
        run: |
          echo "üìÅ Frontend artifacts to be uploaded:"
          echo "Contents of .next directory:"
          find ./eve-abacus-webui/.next -type f -name "*.js" | head -10
          echo ""
          echo "Contents of public directory:"
          ls -la ./eve-abacus-webui/public/
          echo ""
          echo "üìÅ Checking standalone build structure:"
          if [ -d "./eve-abacus-webui/.next/standalone" ]; then
            echo "‚úÖ Standalone directory exists"
            ls -la ./eve-abacus-webui/.next/standalone/
            echo ""
            echo "üìÅ Looking for server.js in standalone:"
            find ./eve-abacus-webui/.next/standalone -name "server.js" -o -name "*.js" | head -5
          else
            echo "‚ùå Standalone directory not found"
            echo "üìÅ Available directories in .next:"
            ls -la ./eve-abacus-webui/.next/
          fi
        working-directory: ./
      
      - name: Prepare frontend artifacts
        run: |
          mkdir -p ./frontend-build
          # Always copy the complete .next directory for production builds
          cp -r ./eve-abacus-webui/.next ./frontend-build/
          cp -r ./eve-abacus-webui/public ./frontend-build/
          cp ./eve-abacus-webui/package.json ./frontend-build/
          cp ./eve-abacus-webui/pnpm-lock.yaml ./frontend-build/
          
          # If standalone exists, also copy it for potential use
          if [ -d "./eve-abacus-webui/.next/standalone" ]; then
            echo "üöÄ Standalone build also available"
            mkdir -p ./frontend-build/standalone
            cp -r ./eve-abacus-webui/.next/standalone/* ./frontend-build/standalone/
          fi
          
          echo "üìÅ Final frontend artifacts:"
          ls -la ./frontend-build/
          echo "üìÅ .next directory contents:"
          ls -la ./frontend-build/.next/
        working-directory: ./
      
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: ./frontend-build
          retention-days: 1

  # Deploy frontend to production
  deploy-frontend:
    needs: [build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifacts
          path: ./frontend-artifacts
      
      - name: Debug downloaded artifacts
        run: |
          echo "üîç Checking downloaded artifacts..."
          echo "Frontend artifacts:"
          ls -la ./frontend-artifacts/ || echo "Frontend artifacts not found"
          echo ""
          echo "Frontend .next directory:"
          ls -la ./frontend-artifacts/.next/ || echo ".next directory not found"
          echo ""
          echo "Frontend public directory:"
          ls -la ./frontend-artifacts/public/ || echo "public directory not found"
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy frontend to Azure VM
        run: |
          # Stop frontend service
          echo "Stopping frontend service..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              sudo systemctl stop eveabacusfrontend 2>/dev/null || true
            "
          
          # Create storage account for large files
          echo "Setting up storage for frontend deployment..."
          STORAGE_ACCOUNT_NAME="evefrontend$(date +%s)"
          az storage account create \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location eastus \
            --sku Standard_LRS \
            --kind StorageV2
          
          # Get storage key
          STORAGE_KEY=$(az storage account keys list \
            --account-name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query '[0].value' -o tsv)
          
          # Create container
          az storage container create \
            --name deployments \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY
          
          # Upload frontend artifacts
          echo "Uploading frontend artifacts..."
          tar -czf frontend-artifacts.tar.gz -C ./frontend-artifacts .
          az storage blob upload \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name frontend-artifacts.tar.gz \
            --file frontend-artifacts.tar.gz
          
          # Deploy frontend from storage
          echo "Deploying frontend from storage..."
          # Generate SAS token for frontend artifacts
          FRONTEND_SAS=$(az storage blob generate-sas \
            --account-name $STORAGE_ACCOUNT_NAME \
            --account-key $STORAGE_KEY \
            --container-name deployments \
            --name frontend-artifacts.tar.gz \
            --permissions r \
            --expiry $(date -u -d "1 hour" '+%Y-%m-%dT%H:%M:%SZ') \
            --full-uri \
            --output tsv)
          
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'üîç Starting frontend deployment...'
              sudo mkdir -p /var/www/eveabacus/frontend
              sudo rm -rf /var/www/eveabacus/frontend/*
              cd /tmp
              echo 'üì• Downloading frontend artifacts...'
              curl -L -o frontend-artifacts.tar.gz \"$FRONTEND_SAS\"
              echo 'üì¶ Extracting frontend artifacts...'
              tar -xzf frontend-artifacts.tar.gz
              echo 'üìÅ Extracted frontend contents:'
              ls -la /tmp/
              echo 'üìÅ .next directory contents:'
              ls -la /tmp/.next/ || echo '.next directory not found'
              echo 'üìÅ public directory contents:'
              ls -la /tmp/public/ || echo 'public directory not found'
              echo 'üìÅ package.json and pnpm-lock.yaml:'
              ls -la /tmp/package.json /tmp/pnpm-lock.yaml 2>/dev/null || echo 'package.json or pnpm-lock.yaml not found'
              echo 'üìÅ Checking for standalone directory:'
              ls -la /tmp/.next/standalone/ || echo 'standalone directory not found'
              
              # Always copy the complete .next directory for production builds
              echo 'üìÅ Copying complete .next directory...'
              sudo cp -r /tmp/.next /var/www/eveabacus/frontend/
              sudo cp -r /tmp/public /var/www/eveabacus/frontend/
              sudo cp /tmp/package.json /var/www/eveabacus/frontend/
              sudo cp /tmp/pnpm-lock.yaml /var/www/eveabacus/frontend/
              
              # Check if standalone server.js exists for potential use
              if [ -f '/tmp/.next/standalone/server.js' ]; then
                echo 'üöÄ Standalone server.js found, copying for potential use'
                sudo mkdir -p /var/www/eveabacus/frontend/standalone
                sudo cp -r /tmp/.next/standalone/* /var/www/eveabacus/frontend/standalone/
              fi
              
              echo 'üìÅ Regular build contents copied:'
              ls -la /var/www/eveabacus/frontend/
              
              # Install dependencies for production build
              echo 'üì¶ Installing dependencies for production build...'
              cd /var/www/eveabacus/frontend
              sudo pnpm install --prod --frozen-lockfile
              echo '‚úÖ Dependencies installed'
              echo 'üìÅ Checking node_modules after install:'
              ls -la /var/www/eveabacus/frontend/node_modules/.bin/ | grep next || echo 'next not found in node_modules/.bin'
              
              # Debug: Check .next directory structure
              echo 'üìÅ Debugging .next directory structure:'
              ls -la /var/www/eveabacus/frontend/.next/
              echo 'üìÅ Checking for build-id file:'
              ls -la /var/www/eveabacus/frontend/.next/BUILD_ID || echo 'BUILD_ID not found'
              echo 'üìÅ Checking for server directory:'
              ls -la /var/www/eveabacus/frontend/.next/server/ || echo 'server directory not found'
              echo 'üìÅ Checking for static directory:'
              ls -la /var/www/eveabacus/frontend/.next/static/ || echo 'static directory not found'
              
              echo 'üîß Setting permissions...'
              sudo chown -R www-data:www-data /var/www/eveabacus/frontend
              sudo chmod -R 755 /var/www/eveabacus/frontend
              echo 'üìÅ Final frontend deployment contents:'
              ls -la /var/www/eveabacus/frontend/
              rm -f frontend-artifacts.tar.gz
              echo '‚úÖ Frontend deployment complete'
            "
          
          # Clean up storage account
          echo "Cleaning up storage account..."
          az storage account delete \
            --name $STORAGE_ACCOUNT_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --yes
          
          # Start frontend service and reload nginx
          echo "Starting frontend service and reloading nginx..."
          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              echo 'üîß Starting frontend service and reloading nginx...'
              
              # Update the service configuration
              echo 'üîß Updating frontend service configuration...'
              sudo systemctl stop eveabacusfrontend 2>/dev/null || true
              sudo rm -f /etc/systemd/system/eveabacusfrontend.service
              
              # Create service file using printf to avoid shell redirection issues
              sudo printf '[Unit]\nDescription=EVE Abacus Next.js Frontend\nAfter=network.target\n\n[Service]\nWorkingDirectory=/var/www/eveabacus/frontend\nExecStartPre=/bin/bash -c "ls -la /var/www/eveabacus/frontend/.next/ && echo BUILD_ID check: && ls -la /var/www/eveabacus/frontend/.next/BUILD_ID || echo BUILD_ID not found"\nExecStart=/usr/local/lib/node_modules/pnpm/bin/pnpm.cjs start\nRestart=always\nRestartSec=10\nSyslogIdentifier=eveabacusfrontend\nUser=www-data\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\n' > /etc/systemd/system/eveabacusfrontend.service
              
              # Reload systemd to pick up the new configuration
              sudo systemctl daemon-reload
              
              # Start frontend service if it exists
              if systemctl list-unit-files | grep -q eveabacusfrontend.service; then
                echo 'üöÄ Starting eveabacusfrontend service...'
                sudo systemctl start eveabacusfrontend
                echo '‚è≥ Waiting for frontend service to start...'
                sleep 5
                if systemctl is-active --quiet eveabacusfrontend; then
                  echo '‚úÖ Frontend service started successfully'
                else
                  echo '‚ö†Ô∏è  Frontend service failed to start'
                  sudo systemctl status eveabacusfrontend
                fi
              else
                echo '‚ö†Ô∏è  eveabacusfrontend service not found'
              fi
              
              # Reload nginx if it exists
              if systemctl list-unit-files | grep -q nginx.service; then
                echo 'üîÑ Reloading nginx...'
                sudo systemctl reload nginx
              else
                echo '‚ö†Ô∏è  nginx service not found'
              fi
              
              echo '‚úÖ Frontend deployment and service startup complete'
            " 