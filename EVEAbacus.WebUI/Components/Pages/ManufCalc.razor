@page "/manufCalc"

@using EVEAbacus.Domain.Models
@using EVEAbacus.Domain.Models.Calculator
@using EVEAbacus.WebUI.Components.Calculator

@inject CalculatorService CalculatorService
@inject ICalcSessionService CalcSessionService
@inject IOrderService OrderService

<PageTitle>Manufacturing Calculator</PageTitle>
<CascadingValue Value="CalculatorService">
    @if (CalculatorService.Loading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        <em>This may take a while if the Market Data has not been updated within the last hour.</em>
    }
    @if (OrderService.Orders == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <OrdersComp OnValidEvent="RunCalc" />
    }

    @if (CalculatorService.ManufBatch == null)
    {
        <p>Create an order to calculate your Production Routing and Bill of Materials</p>
    }
    else
    {
        @* <p> Estimated Bill Of Materials Cost: @($"Ƶ {CalculatorService.ManufBatch.MarketProfile!.MaterialCost:N2}" ?? "") </p>
        <p> Estimated Revenue (Sell Orders): @($"Ƶ {CalculatorService.ManufBatch.MarketProfile!.RevenueSellOrder:N2}" ?? "") </p>
        <p> Estimated Profit (Sell Orders): @($"Ƶ {CalculatorService.ManufBatch.MarketProfile!.ProfitSellOrder:N2}" ?? "") </p>
        <p> Estimated Revenue (Buy Orders): @($"Ƶ {CalculatorService.ManufBatch.MarketProfile!.RevenueBuyOrder:N2}" ?? "") </p>
        <p> Estimated Profit (Buy Orders): @($"Ƶ {CalculatorService.ManufBatch.MarketProfile!.ProfitBuyOrder:N2}" ?? "") </p> *@
        <MudTabs Outlined="true" Position="@Position" Rounded="true" Border="true"
        ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
            <MudTabPanel Text="Production Routing">
                <ProductionRoutingComp />
            </MudTabPanel>
            <MudTabPanel Text="Bill Of Materials">
                <BillOfMaterialsComp />
            </MudTabPanel>
            <MudTabPanel Text="Supply Plan">
                <SupplyPlanContainer SupplyPlan="CalculatorService.ManufBatch.SupplyPlan" />
            </MudTabPanel>
        </MudTabs>

    }
</CascadingValue>

@code {
    private bool _loading = false;

    private bool _hasInitialized = false;
    public Position Position { get; set; } = Position.Top;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasInitialized)
        {
            _hasInitialized = true;
            var sessionOrders = await CalcSessionService.GetOrdersAsync();
            if (sessionOrders != null) { OrderService.SetOrdersFromStorage(sessionOrders); }
            await RunCalc();
        }
    }

    protected async Task OnValidEventAct()
    {
        await RunCalc();
    }

    protected async Task RunCalc()
    {
        Debug.WriteLine("RunCalc");
        CalculatorService.ManufBatch = await CalculatorService.GetManufacturingBatch(OrderService.Orders.ToArray(), CalculatorService.SelectedMarkets.ToArray());
        StateHasChanged();
    }
}