@using EVEAbacus.Domain.Models.Calculator

@inject ICalcSessionService CalcSessionService
@inject IOrderService OrderService
@inject IDialogService DialogService

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">@Order.BlueprintName </MudText>
        <MudText> Runs: @Order.Runs Copies: @Order.Copies</MudText>
        <MudText> MatEff: @Order.ME TimeEff: @Order.TE</MudText>

        @* <MudText>@Order.Runs</MudText>
        <MudText>@Order.Copies</MudText>
        <MudText>@Order.ME</MudText>
        <MudText>@Order.TE</MudText> *@
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenEditDialog(Order)">Edit</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => OpenDeleteDialogAsync(Order)">Delete</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public required Order Order { get; set; }
    [Parameter] public EventCallback OnValidEvent { get; set; }
    private bool _loading;
    private bool _isCalculating = false;

    private bool _deleteOpen;

    private void ToggleDeleteOpen() => _deleteOpen = !_deleteOpen;

    public async Task OnOrderUpdate() => await OnValidEvent.InvokeAsync();

    private async Task OpenDeleteDialogAsync(Order order)
    {
        OrderDTO orderDTO = OrderService.OrderToOrderDTO(order);

        var parameters = new DialogParameters<OrderDeleteComp> { 
            { x => x.OrderDTO, orderDTO },
        };

        var dialog = await DialogService.ShowAsync<OrderDeleteComp>("Delete", parameters);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            OrderService.DeleteOrder(orderDTO);
            await CalcSessionService.SetOrdersAsync(OrderService.Orders);
            await OnValidEvent.InvokeAsync();
        }
    }

    private async Task OpenEditDialog(Order order)
    {
        OrderDTO orderDTO = OrderService.OrderToOrderDTO(order);
        var parameters = new DialogParameters<OrderEditComp>
        {
            { x => x.OrderDTO, orderDTO },
        };

        var dialog = await DialogService.ShowAsync<OrderEditComp>("Edit Order", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await OrderService.EditOrderAsync(orderDTO);
            await CalcSessionService.SetOrdersAsync(OrderService.Orders);
            await OnValidEvent.InvokeAsync();
        }
    }
}
