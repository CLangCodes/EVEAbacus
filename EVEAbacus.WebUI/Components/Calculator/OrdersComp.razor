@using EVEAbacus.Domain.Models.Calculator
@inject ICalcSessionService CalcSessionService
@inject IOrderService OrderService
@inject IDialogService DialogService

<h3>Orders</h3>

<CascadingValue Value="CalculatorService">
    <LocationFilter OnValidEvent="RefreshStations" />

    <MudButton Disabled="@_isCalculating" StartIcon="@Icons.Material.Outlined.Create" ButtonType="ButtonType.Button" OnClick="() => OpenCreateDialog()" >Create an Order</MudButton>
</CascadingValue>

<MudTable Items="@OrderService.Orders.AsQueryable()" 
        Hover="true" Breakpoint="Breakpoint.Xxl"  Loading="@_loading" LoadingProgressColor="Color.Info"
        FixedHeader="true" FixedFooter="true" HorizontalScrollbar="true"
        Dense="true" >
    <HeaderContent>
        <MudTh>Blueprint Name</MudTh>
        <MudTh>Copies</MudTh>
        <MudTh>Runs</MudTh>
        <MudTh>ME</MudTh>
        <MudTh>TE</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.BlueprintName</MudTd>
        <MudTd DataLabel="Copies">@context.Copies</MudTd>
        <MudTd DataLabel="Runs">@context.Runs</MudTd>
        <MudTd DataLabel="ME">@context.ME</MudTd>
        <MudTd DataLabel="TE">@context.TE</MudTd>
        <MudToolBar>
            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => OpenEditDialog(context)">Edit</MudIconButton>
            <MudIconButton Icon="@Icons.Material.Outlined.Remove" OnClick="() => OpenDeleteDialogAsync(context)" />
        </MudToolBar>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [CascadingParameter] required public CalculatorService CalculatorService { get; set; }
    [Parameter] public EventCallback OnValidEvent { get; set; }
    private bool _loading;
    private bool _isCalculating = false;

    private bool _createOpen;
    private bool _deleteOpen;

    private void ToggleCreateOpen() => _createOpen = !_createOpen;
    private void ToggleDeleteOpen() => _deleteOpen = !_deleteOpen;

    public async Task OnOrderUpdate() => await OnValidEvent.InvokeAsync();

    private async Task RefreshStations()
    {
        await OnValidEvent.InvokeAsync();
    }

    private async Task OpenDeleteDialogAsync(Order order)
    {
        OrderDTO orderDTO = OrderService.OrderToOrderDTO(order);

        var parameters = new DialogParameters<OrderDeleteComp> { 
            { x => x.OrderDTO, orderDTO },
        };

        var dialog = await DialogService.ShowAsync<OrderDeleteComp>("Delete", parameters);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            OrderService.DeleteOrder(orderDTO);
            await CalcSessionService.SetOrdersAsync(OrderService.Orders);
            await OnValidEvent.InvokeAsync();
        }
    }
    private async Task OpenEditDialog(Order order)
    {
        OrderDTO orderDTO = OrderService.OrderToOrderDTO(order);
        var parameters = new DialogParameters<OrderEditComp>
        {
            { x => x.OrderDTO, orderDTO },
        };

        var dialog = await DialogService.ShowAsync<OrderEditComp>("Edit Order", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await OrderService.EditOrderAsync(orderDTO);
            await CalcSessionService.SetOrdersAsync(OrderService.Orders);
            await OnValidEvent.InvokeAsync();
        }
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters<OrderCreateComp>
        {
            { x => x.CalculatorService, CalculatorService }
        };

    var dialog = await DialogService.ShowAsync<OrderCreateComp>("Create Order", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is OrderDTO newOrder)
        {
            await OrderService.AddOrderAsync(newOrder);
            await CalcSessionService.SetOrdersAsync(OrderService.Orders);
            await OnValidEvent.InvokeAsync();
        }
    }
}
