@using EVEAbacus.Domain.Models.Calculator
@using System.Diagnostics
@using EVEAbacus.WebUI.Services

@inject ICalcSessionService CalcSessionService

@if (true)
{
    <EditForm Model="@OrderDTO" OnValidSubmit="@(async c => await OnValidSubmit(c))">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudAutocomplete T="string"
                Class="w-100"
                Label="Search Blueprints"
                @bind-Value="@name"
                SearchFunc="@SearchBlueprints"
                ResetValueOnEmptyText="true"
                Strict="true"
                Required="true"
                MinCharacters="2"
                Placeholder="Start typing..."
                RelativeWidth="DropdownWidth.Adaptive" />
                <MudSelect @bind-Value="@OrderDTO.ActivityId" Label="Activity" HelperText="Int" Placeholder="Please Select Activity">
                    @foreach (var bp in Enum.GetValues(typeof(ActivityList)))
                    {
                        <MudSelectItem Value="@Convert.ToByte(bp)">@bp</MudSelectItem>
                    }
                </MudSelect>
                <MudGrid Class="mt-4" GutterSize="3">
                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="Copies" HelperText="Number of BPCs"
                        @bind-Value="OrderDTO.Copies" For="@(() => OrderDTO.Copies)"
                        Min="1" />

                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="Runs" HelperText="Runs on each BPC"
                        @bind-Value="OrderDTO.Runs" For="@(() => OrderDTO.Runs)" 
                        Min="1"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="ME" HelperText="Material Efficiency (0-10)"
                        @bind-Value="OrderDTO.ME" For="@(() => OrderDTO.ME)" 
                        Min="0" Max="10" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="TE" HelperText="Time Efficiency (0-20)"
                        @bind-Value="OrderDTO.TE" For="@(() => OrderDTO.TE)" 
                        Min="0" Max="20" Step="2"/>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton Disabled="@string.IsNullOrWhiteSpace(name)" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Cancel</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}

@code {
    [Parameter] required public CalculatorService CalculatorService { get; set; }
    [CascadingParameter] required public IMudDialogInstance MudDialog { get; set; }

    private OrderDTO OrderDTO { get; set; } = new();
    private int? bpTypeId;
    private int? productTypeId;
    private string? name;

    private string[] _blueprintList = [];

    private enum ActivityList : byte
    {
        Manufacture = 1,
        // TEResearch = 3,
        // MEResearch = 4,
        // Copy = 5,
        // Invention = 8,
        // Reaction = 11
    }

    private void SubmitCreate()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
    private void Cancel() => MudDialog.Cancel();

    private async Task OnValidSubmit(EditContext context)
    {
        bpTypeId = await CalculatorService.GetBlueprintTypeIdbyNameAsync(name!);
        if (bpTypeId != null)
        {
            productTypeId = await CalculatorService.GetProductIdbyBPTypeId((int)bpTypeId, (byte)OrderDTO.ActivityId);
            OrderDTO.BlueprintName = name!;
            MudDialog.Close(DialogResult.Ok(OrderDTO));
        }
    }

    private async Task<IEnumerable<string>> SearchBlueprints(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Array.Empty<string>();

        return await CalculatorService.SearchBlueprintNamesAsync(value);
    }
}
